#include <vector>
#include <unordered_set>
#include <unordered_map>

using namespace std;

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end(), less<int>());
        
        int n = graph.size();
        vector< unordered_set<int> > v;

        for (int i = 0; i < initial.size(); i++) {
            
            unordered_set<int> nothandled, handled;
            nothandled.insert(initial[i]);
            while (!nothandled.empty()) {
                int t = *nothandled.begin();
                nothandled.erase(nothandled.begin());
                handled.insert(t);
                for (int j = 0; j < n; j++)
                    if (graph[t][j] && !handled.count(j))
                        nothandled.insert(j);
            };
            v.push_back(handled);
        };
        unordered_map<int, int> count;
        for (const unordered_set<int>& s : v)
            for (const int& ele : s)
                count[ele]++;
        int ans = 0;
        for (int i = 0; i < initial.size(); i++) {
            int tot = 0;
            for (const int& ele : v[i])
                if (count[ele] == 1)
                    tot++;
            ans = max(ans, tot);
        };
        for (int i = 0; i < initial.size(); i++) {
            int tot = 0;
            for (const int& ele : v[i])
                if (count[ele] == 1)
                    tot++;
            if (ans == tot) return initial[i];
        }
        return -1;
    }
};